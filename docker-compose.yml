version: '3'

services:
  
  djangoweb:
    build: ./users-management-service
    command: >
        sh -c "python manage.py wait_for_db && 
               python manage.py migrate &&
               python manage.py runserver 0.0.0.0:8000"
    volumes:
      - ./users-management-service:/django_code
    ports:
      - "8000:8000"
    environment: 
      - DB_HOST=db
      - DB_NAME=management_django_service
      - DB_USER=postgres_user
      - DB_PASS=supersecret
    restart: on-failure  
    depends_on:
      - db
  
  itrafetcher:
    build: ./itra-results-fetcher-service
    command: >
        sh -c "flask run --host=0.0.0.0"
    volumes:
      - ./itra-results-fetcher-service:/flask_code
    ports:
      - 5000:5000
  
  itra_redis_cache:
    image: redis
    expose:
      - 6379      
  
  endu_redis_cache:
    image: redis
    expose:
      - 6379      

  celery_worker_1:
    build:
      context: ./itra-results-fetcher-service
    hostname: worker_1
    entrypoint: celery
    command: -A  app.app.celery worker 
    volumes:
      - ./itra-results-fetcher-service:/flask_code
    links:
      - itra_redis_cache
    depends_on:
      - itra_redis_cache
  
  celery_worker_2:
    build:
      context: ./enduhub-fetcher-service
    hostname: worker_2
    entrypoint: celery
    command: -A  app.app.celery worker 
    volumes:
      - ./enduhub-fetcher-service:/flask_code
    links:
      - endu_redis_cache
    depends_on:
      - endu_redis_cache    

  enduhubfetcher:
    build: ./enduhub-fetcher-service
    command: >
        sh -c "flask run --host=0.0.0.0"
    volumes:
      - ./enduhub-fetcher-service:/flask_code
    ports:
      - 5001:5000

  datapreparation:
    build: ./data-preparation-service
    command: >
        sh -c "flask run --host=0.0.0.0"
    volumes:
      - ./data-preparation-service:/flask_code
    ports:
      - 5002:5000
  
 
  
  datapreparation_redis:
    image: redis
    expose:
      - 6379      
  
  # predictor:
  #   build: ./prediction-service
  #   command: >
  #       sh -c "flask run --host=0.0.0.0"
  #   volumes:
  #     - ./prediction-service:/flask_code
  #   ports:
  #     - 5003:5000    

  resultapi:
    build: ./race-service
    command: >
        sh -c "python manage.py migrate &&
               python manage.py runserver 0.0.0.0:8000"
    volumes:
      - ./race-service:/django_code
    ports:
      - "8001:8000"
    environment: 
      - DB_HOST=db_race_results
      - DB_NAME=db_race_results
      - DB_USER=postgres_user
      - DB_PASS=supersecret
    restart: on-failure  
    depends_on:
      - db_race_results
  
  runnerapi:
    build: ./runner-results-service
    command: >
        sh -c "python manage.py migrate &&
               python manage.py runserver 0.0.0.0:8000"
    volumes:
      - ./runner-results-service:/django_code
    ports:
      - "8002:8000"
    environment: 
      - DB_HOST=db_runner_results
      - DB_NAME=db_runner_results
      - DB_USER=postgres_user
      - DB_PASS=supersecret
    restart: on-failure  
    depends_on:
      - db_runner_results
      
  
  
  
  db:
    image: postgres:11-alpine
    environment: 
      - POSTGRES_DB=management_django_service
      - POSTGRES_USER=postgres_user
      - POSTGRES_PASSWORD=supersecret
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
  

  db_race_results:
    image: postgres:11-alpine
    environment: 
      - POSTGRES_DB=db_race_results
      - POSTGRES_USER=postgres_user
      - POSTGRES_PASSWORD=supersecret
    volumes:
      - ./postgres-data-race-results:/var/lib/postgresql/data 
  
  db_runner_results:
    image: postgres:11-alpine
    environment: 
      - POSTGRES_DB=db_runner_results
      - POSTGRES_USER=postgres_user
      - POSTGRES_PASSWORD=supersecret
    volumes:
      - ./postgres-data-runner-results:/var/lib/postgresql/data              

  frontservice:
    build: ./front-vue-service
    ports:
      - "8080:8080"
    volumes:
      - './front-vue-service:/app'
      - './front-vue-service/node_modules:/app/node_modules'
    stdin_open: true
    tty: true
    restart: on-failure  
    
volumes:
  postgres_data:      
